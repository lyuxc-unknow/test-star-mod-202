apply {
    from rootProject.file("buildSrc/build.gradle")
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
        }
    }
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

dependencies {
    compileOnly "curse.maven:mcwifipnp-450250:5646534"
    runtimeOnly "curse.maven:mcwifipnp-450250:5646534"
    compileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    runtimeOnly "me.shedaniel.cloth:cloth-config-neoforge:15.0.127"
    implementation "software.bernie.geckolib:geckolib-neoforge-${old_minecraft_version}:4.5.7"
}

neoForge {
    version = neo_version

    parchment {
        minecraftVersion = parchment_minecraft_version
        mappingsVersion = parchment_mappings_version
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.INFO
        }

        create("client") {
            client()
        }

        create("data") {
            data()

            programArguments=[
                    "--mod", "test_star_core",
//                    "--all",
                    "--server", "--client",
                    "--output", file("src/generated/resources").absolutePath,
                    "--existing", file("src/main/resources").absolutePath,
                    "--existing", file("../test_star_core/src/main/resources").absolutePath,
                    "--existing", file("../test_star_core/src/generated/resources").absolutePath
            ]
        }

        create("server") {
            server()
        }
    }

    mods {
        create("mind-core") {
            sourceSet(sourceSets["main"])
        }
    }
}
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
}
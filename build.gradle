plugins {
    id 'java-library'
//    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '1.0.+'
}

repositories {
    mavenLocal()
    maven {
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://maven.k-4u.nl"
    }
    maven {
        url = "http://localhost:8080/repository/maven-public/"
        allowInsecureProtocol = true
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        name "Modmaven"
        url "https://modmaven.dev/"
        content {
            includeGroup 'appeng'
            includeGroup 'aztech'
            includeGroup 'dev.technici4n'
        }
    }
    maven {
        name "shedaniel Maven"
        url "https://maven.shedaniel.me/"
    }
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)


neoForge {
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            client()
            programArguments.addAll "--username","lyuxc_","--uuid","ce691642-c635-44a0-9d25-8856ccfc9ab1"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

//    ideSyncTask tasks.named("neoForgeIdeSync")
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
//    implementation "net.neoforged:neoforge:${neo_version}"
    implementation jarJar("mod.lyuxc.Jrrp:Jrrp-1.21:1.0.0-neoforge")
    implementation jarJar("mod.lyuxc.MagicClover:Magic-Clover-1.21:1.0.0-neoforge")

//    compileOnly "curse.maven:mcwifipnp-450250:5317647"
    compileOnly("mezz.jei:jei-${old_minecraft_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${old_minecraft_version}-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-${old_minecraft_version}-neoforge:${jei_version}")
    runtimeOnly "dev.technici4n:GrandPower:3.0.0"
    runtimeOnly "me.shedaniel.cloth:cloth-config-neoforge:15.0.127"

    implementation "curse.maven:theoneprobe-245211:5502323"
    implementation "aztech:Modern-Industrialization:2.2.9-beta"
    implementation "software.bernie.geckolib:geckolib-neoforge-${old_minecraft_version}:4.5.7"
    implementation "appeng:appliedenergistics2:19.0.15-alpha"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "http://localhost:8080/repository/maven-releases/"
            allowInsecureProtocol = true
            credentials {
                username = 'admin'
                password = '@lyuxc@'
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}